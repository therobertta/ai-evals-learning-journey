name: Update Project Status on PR Merge

on:
  pull_request:
    types: [closed]

jobs:
  update-project-status:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      
    - name: Extract issue number from PR body
      id: extract-issue
      run: |
        # Extract issue number from PR body using regex
        ISSUE_NUMBER=$(echo '${{ github.event.pull_request.body }}' | grep -oP '(?:Closes|Fixes|Resolves)\s+#\K\d+' | head -1)
        echo "Found issue number: $ISSUE_NUMBER"
        echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        
    - name: Get project item ID for issue
      if: steps.extract-issue.outputs.issue_number != ''
      id: get-project-item
      run: |
        ISSUE_NUMBER="${{ steps.extract-issue.outputs.issue_number }}"
        
        # Query GitHub API to get project item ID for this issue
        QUERY='query {
          repository(owner: "${{ github.repository_owner }}", name: "${{ github.event.repository.name }}") {
            issue(number: '$ISSUE_NUMBER') {
              projectItems(first: 10) {
                nodes {
                  id
                  project {
                    id
                    title
                  }
                }
              }
            }
          }
        }'
        
        RESPONSE=$(gh api graphql --field query="$QUERY")
        echo "GraphQL Response: $RESPONSE"
        
        # Extract project item ID for the "AI Evals HW" project
        PROJECT_ITEM_ID=$(echo "$RESPONSE" | jq -r '.data.repository.issue.projectItems.nodes[] | select(.project.title == "AI Evals HW") | .id')
        
        if [ "$PROJECT_ITEM_ID" != "null" ] && [ -n "$PROJECT_ITEM_ID" ]; then
          echo "Found project item ID: $PROJECT_ITEM_ID"
          echo "project_item_id=$PROJECT_ITEM_ID" >> $GITHUB_OUTPUT
        else
          echo "No project item found for issue #$ISSUE_NUMBER in AI Evals HW project"
          exit 1
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update project status to Done
      if: steps.get-project-item.outputs.project_item_id != ''
      run: |
        PROJECT_ID="PVT_kwDOCyai2s4A7gSA"  # AI Evals HW project ID
        ITEM_ID="${{ steps.get-project-item.outputs.project_item_id }}"
        STATUS_FIELD_ID="PVTSSF_lADOCyai2s4A7gSAzgvyG5I"  # Status field ID
        DONE_OPTION_ID="98236657"  # "Done" option ID
        
        MUTATION='mutation {
          updateProjectV2ItemFieldValue(input: {
            projectId: "'$PROJECT_ID'"
            itemId: "'$ITEM_ID'"
            fieldId: "'$STATUS_FIELD_ID'"
            value: {
              singleSelectOptionId: "'$DONE_OPTION_ID'"
            }
          }) {
            projectV2Item {
              id
            }
          }
        }'
        
        echo "Updating project status for item $ITEM_ID to Done"
        gh api graphql --field query="$MUTATION"
        echo "âœ… Successfully updated issue #${{ steps.extract-issue.outputs.issue_number }} status to Done"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Add comment to issue
      if: steps.extract-issue.outputs.issue_number != ''
      run: |
        ISSUE_NUMBER="${{ steps.extract-issue.outputs.issue_number }}"
        COMMENT="ðŸŽ‰ This issue has been automatically marked as **Done** because PR #${{ github.event.pull_request.number }} has been merged.

**Merged PR:** ${{ github.event.pull_request.html_url }}
**Branch:** \`${{ github.event.pull_request.head.ref }}\`
**Merged by:** @${{ github.event.pull_request.merged_by.login }}

---
*This status update was automated by GitHub Actions.*"
        
        gh api repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments \
          --method POST \
          --field body="$COMMENT"
        
        echo "âœ… Added comment to issue #$ISSUE_NUMBER"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}